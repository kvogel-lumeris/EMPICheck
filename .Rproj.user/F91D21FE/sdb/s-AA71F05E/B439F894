{
    "collab_server" : "",
    "contents" : "if (!requireNamespace('htmlwidgets') || packageVersion('htmlwidgets') <= '0.3.2')\n  devtools::install_github('ramnathv/htmlwidgets')\n# install DT\nif (!require(\"DT\")) devtools::install_github(\"rstudio/DT\")\n# if (!require(\"purrr\")) devtools::install_github(\"hadley/purrr\")\n\n#library(XLConnect)\nlibrary(RODBC)\nlibrary(data.table)\nlibrary(sqldf)\nlibrary(tidyr)\nlibrary (plyr)\nlibrary(dplyr)\nlibrary(knitr)\nlibrary(pander)\nlibrary(purrr)\nlibrary(ggplot2)\nlibrary(chron)\nlibrary(date)\nlibrary(zoo)\nlibrary(lubridate)\nlibrary(reshape)\nlibrary(shiny)\nlibrary(shinyBS)\n# library(DT)\n\n##get common functions\nwd <-getwd()\nsetwd('..')\nsource('./SharedDataScripts/CommonFunctions.R')\nsetwd(wd)\n# remove(wd)\n\nConsEnv <-\"Prod\"\nConsClientDB <-\"Implementation\"\n\nAddress <- \"SAS-SQL-C01-V02.prodapp.domain,50002\"\n# Address <- \"SAS-SQL-C01-V02.PRODAPP.DOMAIN/CONSULT02\"\n\nsQuery <-\"SELECT * FROM tTestServers\"\nSERVERS <- fnQueryDatabaseGeneric(Address,ConsClientDB,sQuery)\n\nsQuery <- \"SELECT * FROM tTestClients WHERE Enabled = 1\"\nCLIENTS <- fnQueryDatabaseGeneric(Address,ConsClientDB,sQuery)\n\nToday <- as.Date(Sys.Date())\n\nrm(ConsEnv)\nrm(ConsClientDB)\nrm(Address)\n\n\n\n\n######\nui <- fluidPage(\n  titlePanel(\"EMPI Check\"),\n  sidebarLayout(\n    sidebarPanel(\n      # selectInput(\"match\",\n      #             label=\"Select Match on criteria\",choices=list(\"Demographics\"=1,\"MBR_ID\"=2,\"SYS_MBR_SK\"=3),                  \n      #             selected=1),\n      uiOutput(\"clientOutput\"),\n      uiOutput(\"odsenvOutput\"),\n      uiOutput(\"ipaasenvOutput\"),\n      uiOutput(\"entityOutput\")\n      ),\n      mainPanel(\n        ######Render Markdown\n        htmlOutput('markdown')\n        ######\n        ######Test POP_MBR\n        # tableOutput('results')\n        ######\n        ######Test Input Variables\n        # textOutput('match'),\n        # textOutput('client'),\n        # textOutput('odsenv'),\n        # textOutput('ipaasenv'),\n        # textOutput('entity')\n        ######\n      )\n    )\n  )\n\n\n######\n\nserver <- function(input, output, session) {\n  \n  output$clientOutput <- renderUI({\n    selectInput(\"clientInput\", \"Client\",\n      sort(unique(CLIENTS$Abbrev)))\n  })\n  \n  reactive({\n    if (is.null(input$clientInput) || is.na(input$clientInput)) {\n      return(NULL)\n    }  \n    \n    ClientID <<- CLIENTS %>%\n      filter(Abbrev == input$clientInput) %>%\n      select(ClientID) %>%\n      unique()\n    \n  })\n  \n  \n  \n  output$odsenvOutput <- renderUI({\n    selectInput(\"odsenvInput\", \"ODS Environment\",\n      sort(unique(SERVERS$Name)))\n  })\n  \n  reactive({\n    if (is.null(input$odsenvInput) || is.na(input$odsenvInput)) {\n      return(NULL)\n    }   \n    \n    \n    ODSAddress <<- SERVERS %>%\n      filter(Type == \"ODS\") %>%\n      filter(Name == input$odsenvInput) %>%\n      select(Path) %>%\n      unique() \n \n    sQuery <-\"SELECT name AS DBName FROM sys.databases\"\n    \n    fnQueryDatabaseGeneric(ODSAddress,'master',sQuery)\n\n    \n  })\n  \n  \n  output$ipaasenvOutput <- renderUI({\n    selectInput(\"ipaasenvInput\", \"iPaaS Environment\",\n      sort(unique(SERVERS$Name)))\n  })\n  \n  ENTITIES <<- reactive({\n    if (is.null(input$ipaasenvInput) || is.na(input$ipaasenvInput)) {\n      return(NULL)\n    } \n    \n    IPAASAddress <<- SERVERS %>%\n      filter(Type == \"IPAAS\") %>%\n      filter(Name == input$ipaasenvInput) %>%\n      select(Path) %>%\n      unique() \n    \n    # IPAASAddress <<- \"SAS-SQL-S01-V02.PRODAPP.DOMAIN,50004\"\n    \n    sQuery <- \"SELECT * FROM IPAAS.IFENT001MT\"\n   fnQueryDatabaseGeneric(IPAASAddress, \"IPAAS\", sQuery)\n    \n  })\n  \n  \n  output$entityOutput <- renderUI({\n    selectInput(\"entityInput\", \"Entity ID\",\n      sort(unique(ENTITIES()$ENTITY_NM)))\n  })\n  \n  reactive({\n    if (is.null(input$entityInput) || is.na(input$entityInput)) {\n      return(NULL)\n    } \n    \n    EntityID <<- ENTITIES() %>%\n      filter(ENTITY_NM == input$entityInput) %>%\n      select(ENTITY_ID) %>%\n      unique() \n\n  })\n  \n  ######Render Markdown\n  output$markdown <- renderUI({\n\n    rmarkdown::render(\"EMPICheck.Rmd\")\n\n  })\n  ######\n ######Test Input Variables \n  # output$match <- renderText({\n  #   local(input$matchInput)\n  # })\n  # \n  # output$client <- renderText({\n  #   local(input$clientInput)\n  # })\n  # \n  # output$odsenv <- renderText({\n  #   local(input$odsenvInput)\n  # })\n  # \n  # output$ipaasenv <- renderText({\n  #   local(input$ipaasenvInput)\n  # })\n  # \n  # output$entity <- renderText({\n  #   local(input$entityInput)\n  # })\n  \n  ######\n  ######Test POP_MBR\n  # output$results <- renderTable({\n  # \n  #   POP()%>%\n  #       select(EMPI, PrimaryGroupingLevel, PrimaryGroupingLabel) %>%\n  #       group_by(EMPI) %>%\n  #       summarise(\n  #         PrimaryGroupingLevel = max(PrimaryGroupingLevel),\n  #         PrimaryGroupingLabel = max(PrimaryGroupingLabel)\n  #       ) %>%\n  #       head()\n  # })\n  ######\n}\n\nshinyApp(ui = ui, server = server)\n",
    "created" : 1478551788640.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3301022533",
    "id" : "B439F894",
    "lastKnownWriteTime" : 1478538930,
    "last_content_update" : 1478538930,
    "path" : "~/R/Projects/EMPICheck/EMPICheckApp.R",
    "project_path" : "EMPICheckApp.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}